    public class Pixels7<T> where T : struct
    {
        T[] pixel;
        public int Width { get; private set; }
        public int Height { get; private set; }
        public int Size { get; private set; }

        //System.ValueTuple
        public (int width, int height) GetSize()
        {
            return (Width, Height);
        }

        public Pixels7(int width, int height)
        {
            this.Width = width;
            this.Height = height;
            this.Size = width * height;

            this.pixel = new T[Size];
        }
        public Pixels7(T[] src)
        {
            this.Width = src.Length;
            this.Height = 1;
            this.Size = src.Length;

            object obj = pixel;
            switch (obj)
            {
                case int[] v when v.Length > 0:
                    break;
            }
        }


        public ref T this[int i] =>ref  pixel[i];
        public ref T this[int x, int y] => ref pixel[x + y * Width];


        public void resharp(int width, int height)
        {
            if (width * height > Size) throw new ArgumentException();

            this.Width = width;
            this.Height = height;

            //return this;
        }
        public void shiftpixel()
        {
            for(int i=0;i<pixel.Length; i++)
            {
                pixel[i] = pixel[i+1];
            }
        }

        public static void Add(this int[] value,int[] value2)
        {
            for (int i = 0; i < value.Length; i++)
                value[i] += value2[i];
        }

        public void Sub() => throw new NotImplementedException();
        public void Mul() => throw new NotImplementedException();
        public void Div() => throw new NotImplementedException();
        public void RShift() => throw new NotImplementedException();
        public void LShift() => throw new NotImplementedException();


        public static ref int Max(ref int x, ref int y)
        {
            if (x < y) return ref y;
            else return ref x;
        }

        static void A() => throw new NotImplementedException();

//p.GetCoordinates(out int x, out int y);
//WriteLine($"({x},{y})"); // (100,200)
    }


//条件演算子?:の第2オペランドと第3オペランド：
//x >= 0 ? x : throw new ArgumentException();
//null結合演算子??の第2オペランド：
//x ?? throw new ArgumentException();
//式形式の関数メンバー：
//void NeverReturn() => throw new NotSupportedException();
//（後述する）switch式の中

//    // 従来
//if (hoge == null) return null;
//return hoge.Hoge();

//// C# 6.0
//return hoge?.Hoge();

//var className = nameof(HogeClass);

//PropertyInfo[] infoArray = _person.GetType().GetProperties();
			
//			// プロパティ情報出力をループで回す
//			foreach (PropertyInfo info in infoArray)
//			{
//				Console.WriteLine(info.Name + ": " + info.GetValue(_person,null));
//			}
//		}