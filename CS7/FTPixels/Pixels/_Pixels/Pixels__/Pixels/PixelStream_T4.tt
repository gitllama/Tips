<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#
	var Type = new Dictionary<string, string>();
	var Comment = new Dictionary<string, string>();
	var Op = new Dictionary<string, string>();	//演算子はキャスト必要な時
	var OpSign = new Dictionary<string, string>();	//演算子は符号
	var OpBit = new Dictionary<string, string>(); //演算子はビット演算
	var Size = new Dictionary<string, int>();
	var ForByte = new Dictionary<string, string>();

	Type["PixelByte"]	= "byte";
	Type["PixelUShort"]	= "ushort";
	Type["PixelUInt"]	= "uint";
	Type["PixelULong"]	= "ulong";
	Type["PixelShort"]	= "short";
	Type["PixelInt"]	= "int";
	Type["PixelLong"]	= "long";
	Type["PixelFloat"]	= "float";
	Type["PixelDouble"]	= "double";

	Comment["PixelByte"]	= "符号なし8ビット整数";
	Comment["PixelUShort"]	= "符号なし16ビット整数";
	Comment["PixelUInt"]	= "符号なし32ビット整数";
	Comment["PixelULong"]	= "符号なし64ビット整数";
	Comment["PixelShort"]	= "符号付き16ビット整数";
	Comment["PixelInt"]	= "符号付き32ビット整数";
	Comment["PixelLong"]	= "符号付き64ビット整数";
	Comment["PixelFloat"]	= "単精度(32ビット)浮動小数点";
	Comment["PixelDouble"]	= "単精度(64ビット)浮動小数点";

	Op["PixelByte"]	= "PixelInt";
	Op["PixelUShort"]	= "PixelInt";
	Op["PixelUInt"]	= "PixelUInt";
	Op["PixelULong"]	= "PixelULong";
	Op["PixelShort"]	= "PixelInt";
	Op["PixelInt"]	= "PixelInt";
	Op["PixelLong"]	= "PixelLong";
	Op["PixelFloat"]	= "PixelFloat";
	Op["PixelDouble"]	= "PixelDouble";
	
	OpSign["PixelByte"]	= "PixelInt";
	OpSign["PixelUShort"]	= "PixelInt";
	OpSign["PixelUInt"]	= "PixelLong";
	OpSign["PixelULong"]	= "PixelULong";
	OpSign["PixelShort"]	= "PixelInt";
	OpSign["PixelInt"]	= "PixelInt";
	OpSign["PixelLong"]	= "PixelLong";
	OpSign["PixelFloat"]	= "PixelFloat";
	OpSign["PixelDouble"]	= "PixelDouble";

	OpBit["PixelByte"]	= "PixelInt";
	OpBit["PixelUShort"]	= "PixelInt";
	OpBit["PixelUInt"]	= "PixelUInt";
	OpBit["PixelULong"]	= "PixelULong";
	OpBit["PixelShort"]	= "PixelInt";
	OpBit["PixelInt"]	= "PixelInt";
	OpBit["PixelLong"]	= "PixelLong";
	OpBit["PixelFloat"]	= "PixelFloat";
	OpBit["PixelDouble"]	= "PixelDouble";

	Size["PixelByte"]	= 1;
	Size["PixelUShort"]	= 2;
	Size["PixelUInt"]	= 4;
	Size["PixelULong"]	= 8;
	Size["PixelShort"]	= 2;
	Size["PixelInt"]	= 4;
	Size["PixelLong"]	= 8;
	Size["PixelFloat"]	= 4;
	Size["PixelDouble"]	= 8;

	ForByte["PixelByte"]	= "";
	ForByte["PixelUShort"]	= "ToUInt16";
	ForByte["PixelUInt"]	= "ToUInt32";
	ForByte["PixelULong"]	= "ToUInt64";
	ForByte["PixelShort"]	= "ToInt16";
	ForByte["PixelInt"]		= "ToInt32";
	ForByte["PixelLong"]	= "ToInt64";
	ForByte["PixelFloat"]	= "ToSingle";
	ForByte["PixelDouble"]	= "ToDouble";
#>
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using System.IO;
using System.Runtime.InteropServices;
using System.Drawing;
using System.Drawing.Imaging;
using System.Threading;

using System.Reflection;
using System.Text.RegularExpressions;
using System.Linq.Expressions;
using System.Windows.Media.Imaging;
using System.Windows.Media;

/*******************************************************************************/
/*   Pixels 2016/07/23                                                         */
/*******************************************************************************/
namespace Pixels
{
    /*--------------------------------------*/
    //   読み
    /*--------------------------------------*/
    public unsafe static partial class PixelStream
    {
		/*******************************/
		#region Binラッパー
<# foreach (var i in Type.Keys){ #>
        public static <#= i #> ReadBinTo<#= i #>(string filename, int w, int h, int offsetbyte)
        {
			byte[] scr = File.ReadAllBytes(filename);
            <#= Type[i] #>[] buf = new <#= Type[i] #>[w*h];
			ReadBin(ref scr, ref buf, w * h, offsetbyte);
            return new <#= i #>(buf, w, h, new CancellationTokenSource());
        }
<# } #>
<# foreach (var i in Type.Keys){ #>
        public static <#= i #> ReadBinTo<#= i #>(Stream z, int w, int h, int offsetbyte)
        {
			byte[] scr = Stream(z, w*h*<#=Size[i] #>);
            <#= Type[i] #>[] buf = new <#= Type[i] #>[w*h];
			ReadBin(ref scr, ref buf, w * h, offsetbyte);
            return new <#= i #>(buf, w, h, new CancellationTokenSource());
        }
<# } #>
        public static PixelInt ReadBin24ToPixelInt(string filename, int w, int h, int offsetbyte)
        {
			byte[] scr = File.ReadAllBytes(filename);
			int[] buf = new int[w*h];
			ReadBinSift8(ref scr, ref buf, w * h, offsetbyte);
            return new PixelInt(buf, w, h, new CancellationTokenSource());
        }
		#endregion
		/*******************************/
		#region Bin本体
        public static void ReadBin(ref byte[] scr, ref byte[] buf,int size, int offsetbyte)
        {
            fixed (byte* r = &buf[0])
            fixed (byte* s = &scr[0])
            {
                byte* ss = s + offsetbyte;
                byte* rr = r;
                for (int i = 0; i < size; i++)
                    *rr++ = *ss++;
            }
        }
<# foreach (var i in Type.Keys){ if(i=="PixelByte") continue;#>
	    public static void ReadBin(ref byte[] scr, ref <#= Type[i] #>[] buf,int size, int offsetbyte)
        {
			int sizebyte = <#= Size[i] #>;
			byte[] Endian = new byte[sizebyte];

            fixed (<#= Type[i] #>* r = &buf[0])
            fixed (byte* s = &scr[0])
			fixed (byte* e = &Endian[0])
            {
                byte* ss = s + offsetbyte;
                byte* ee = e;
                <#= Type[i] #>* rr = r;
                for (int i = 0; i < size; i++)
                {
<# for(int j = 0 ;j< Size[i];j++){ #>
                    *(ee + <#= j #>) = *ss++;
<# } #>
                    *rr++ = BitConverter.<#= ForByte[i] #>(Endian, 0);
                }
            }
        }
<# } #>
        public static void ReadBinSift8(ref byte[] scr, ref int[] buf,int size, int offsetbyte)
        {
			int sizebyte = 4;
			byte[] Endian = new byte[sizebyte];

            fixed (int* r = &buf[0])
            fixed (byte* s = &scr[0])
			fixed (byte* e = &Endian[0])
            {
                byte* ss = s + offsetbyte;
                byte* ee = e;
                int* rr = r;
                for (int i = 0; i < size; i++)
                {
                    *(ee + 0) = *ss++;
                    *(ee + 1) = *ss++;
                    *(ee + 2) = *ss++;
                    *(ee + 3) = *ss++;
                    *rr++ = BitConverter.ToInt32(Endian, 0) >> 8;
                }
            }
        }
		#endregion
	}

	/*--------------------------------------*/
    //   書き
    /*--------------------------------------*/
    public unsafe static partial class PixelStream
    {
		#region Bin
<# foreach (var i in Type.Keys){ #>
	    public static void WriteBin(this <#= i #> p, string filename)
        {
            //フォルダなかったら無理やり作る
            if (!System.IO.Directory.Exists(Path.GetDirectoryName(filename)))
                System.IO.Directory.CreateDirectory(Path.GetDirectoryName(filename));
            using (FileStream r = new FileStream(filename, FileMode.Create, FileAccess.Write))
            {
                int bytesize = sizeof(<#= Type[i] #>);
				<#= Type[i] #> i;
                for (int y = 0; y < p.Height; y++)
                    for (int x = 0; x < p.Width; x++)
                    {
                        i = p[x, y];
                        r.Write(BitConverter.GetBytes(i), 0, bytesize);
                    }
            }
        }
<# } #>
<# foreach (var i in Type.Keys){ #>
        public static void WriteTxt(Stream z,<#= i #> p)
        {
            byte[] buf;
            Action<string> write = (st) =>
            {
                buf = System.Text.Encoding.ASCII.GetBytes(st);
                z.Write(buf, 0, buf.Length);
            };

            for (int i = 0; i < p.Size; i++)
                write(p[i] + System.Environment.NewLine);
        }
<# } #>
<# foreach (var i in Type.Keys){ #>
	    public static void WriteBin(Stream z, <#= i #> p)
        {
            int bytesize = sizeof(<#= Type[i] #>);
			int pixsize = p.Size;
            for (int i = 0; i < pixsize; i++)
				z.Write(BitConverter.GetBytes(p[i]), 0, bytesize);
        }
<# } #>
<# foreach (var i in Type.Keys){ #>

<# } #>

		#endregion

		#region CSV
<# foreach (var i in Type.Keys){ #>
		public static void WriteCSV(this <#= i #> p, string filename,bool pgmheader = false, string delimiter = ", ")
        {
            //Func<T, string> cout = (i) => String.Format("{0}", i);
			int w = p.Width;
			int h = p.Height;

            using (StreamWriter wr = new StreamWriter(filename))
            {
				if(pgmheader)
				{
					wr.Write($"P2{System.Environment.NewLine}");
					wr.Write($"{w} {h}{System.Environment.NewLine}");
					wr.Write($"{p.Max()}{System.Environment.NewLine}");
				}
                for (int y = 0; y < h; y++)
                {
                    for (int x = 0; x < w - 1; x++)
                    {
                        wr.Write(p[x, y]);
                        wr.Write(delimiter);
                    }
                    wr.Write(p[w - 1, y]);
                    wr.Write(System.Environment.NewLine);
                }
            }
		}
<# } #>
		#endregion

		#region BMP
<# foreach (var i in Type.Keys){ #>
		public static BitmapSource ToBitmapSource(this <#= i #> p, double offset, double depth)
        {
			//((pix + offset) * 255 / depth).Limits(typeof(Byte)).ToPixelByte().ToBitmapSource();

			byte[] buf_byte = new byte[p.Width * p.Height];

			for (int i = 0; i < p.Width * p.Height; i++)
			{
				var hoge = ((p[i] + offset) * 255 / depth);
				buf_byte[i] = (byte)(hoge > 255 ? 255 : hoge < 0 ? 0 : hoge);
				
			}

			var buf = BitmapImage.Create(
                p.Width, p.Height, 96, 96,
                System.Windows.Media.PixelFormats.Gray8,
                null,
                buf_byte,
                (p.Width * PixelFormats.Gray8.BitsPerPixel + 7) / 8);
            buf.Freeze();
            return buf;
		}
<# } #>
		#endregion

	}

}